#version 330 core

layout(location = 0) in vec3 vertexPosition;
layout(location = 1) in vec3 vertexNormal;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform vec3 lightPosition;
uniform vec4 vertexColor;

out vec3 Normal_cameraspace;
out vec3 Position_worldspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec4 finalColor;

void main() { 
	mat4 MVP = projection * view * model;
 	gl_Position = MVP * vec4(vertexPosition.xyz, 1.0f);

	vec4 LightColor = vec4(1.0f, 1.0f, 1.0f, 1.0f);
	//float LightPower = 2.0f;

	// Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
	Normal_cameraspace = normalize( (view * model * vec4(vertexNormal, 0)).xyz );

	vec3 LightPosition_cameraspace = ( view * vec4(lightPosition, 1)).xyz;
	//LightDirection_cameraspace = normalize( LightPosition_cameraspace + EyeDirection_cameraspace );
	vec3 lightDirection = normalize( lightPosition );

	float NdotL = max(dot(Normal_cameraspace, lightDirection), 0.0);

	// Position of the vertex, in worldspace : M * position
	//Position_worldspace = (model * vec4(vertexPosition, 1)).xyz;

	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	//vec3 vertexPosition_cameraspace = ( view * model * vec4(vertexPosition, 1)).xyz;
	//EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;
	//EyeDirection_cameraspace = vertexPosition_cameraspace;

	float distance = length( lightPosition - Position_worldspace );

	//diffuse = gl_FrontMaterial.diffuse * gl_LightSource[0].diffuse;
	vec4 diffuse = vertexColor * (LightColor / distance);
	//diffuse = vertexColor * LightColor;
	//diffuse = LightColor * vertexColor;
	finalColor =  NdotL * diffuse;
	//finalColor = vec4(1.0f, 0.0f, 0.0f, 1.0f);
}